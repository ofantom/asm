bits 64

section .data



section .text

    global min_pos
min_pos:
    enter 0,0
    
;   rsi = –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ (–∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤) ‚Üê (int t_N) 
;   eax ‚Üê —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ (–º–∞–∫—Å. int), eax = —Ç–µ–∫—É—â–∏–π –º–∏–Ω–∏–º—É–º
;   rcx ‚Üê –∏–Ω–¥–µ–∫—Å i = 0  => rcx = —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ
;   ebx = –Ω–æ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂ —á–∏—Å–µ–ª
;   rdi —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞   


    movsx rsi, esi
    mov eax, 0x7FFFFFFF
    xor rcx, rcx

.cikl:
    cmp rcx, rsi  ;cmp rcx, rsi
    jge .end

    mov ebx, [rdi + rcx * 4]                            ; mov ebx, 0 
    cmp ebx, 0                                          ; cmp [rdi + rcx * 4], ebx

    jl .skip
; ---------------------------

    cmp ebx, eax                                        ;cmp [rdi + rcx * 4], eax
    jge .skip


    mov eax, ebx                                        ;[rdi + rcx * 4]
    
    
; ---------------------------
.skip:
    inc rcx ; i++
    jmp .cikl



.end:
    leave
    ret

ret

; –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
; 1. üîÅ –¢—ã 3 —Ä–∞–∑–∞ —á–∏—Ç–∞–µ—à—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∏–∑ –ø–∞–º—è—Ç–∏: